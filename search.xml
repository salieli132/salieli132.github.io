<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kyoto</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p><img src="/images/%E8%8A%B1%E9%97%B4%E5%B0%8F%E8%B7%AF.jpg" alt="1"></p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p><img src="/images/%E4%BA%8C%E5%B9%B4%E7%89%88.jpg" alt="2"></p><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p><img src="/images/%E6%B8%85%E6%B0%B4%E5%AF%BA1.jpg" alt="3"></p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>伏见稻荷大社</p><h4 id="中二病也要谈恋爱"><a href="#中二病也要谈恋爱" class="headerlink" title="中二病也要谈恋爱"></a>中二病也要谈恋爱</h4><p><img src="/images/%E9%99%84%E4%BB%B61.jpg" alt="11"></p><h4 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h4><p><img src="/images/%E9%99%84%E4%BB%B62.jpg" alt="22"></p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><h3 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h3><p><img src="/images/%E5%B2%9A%E5%B1%B1.jpg" alt="a"></p><h3 id="鸭川"><a href="#鸭川" class="headerlink" title="鸭川"></a>鸭川</h3><p><img src="/images/kon8.jpg" alt="yc"></p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p><img src="/images/kon1.jpg" alt="Q"></p><p><img src="/images/kon2.jpg" alt="W"></p><p><img src="/images/kon3.jpg" alt="E"></p><p><img src="/images/kon4.jpg" alt="R"></p><p><img src="/images/kon5.jpg" alt="T"></p><p><img src="/images/kon6.jpg" alt="Y"></p><p><img src="/images/kon7.jpg" alt="U"></p><p><img src="/images/kon9.jpg" alt="I"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shimonoseki</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="下北泽"><a href="#下北泽" class="headerlink" title="下北泽"></a>下北泽</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p><img src="/images/%E4%B8%8B%E5%8C%97%E6%B3%BD1.png" alt="1"></p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p><img src="/images/%E4%B8%8B%E5%8C%97%E6%B3%BD2.png" alt="2"></p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p><img src="/images/%E4%B8%8B%E5%8C%97%E6%B3%BD3.png" alt="3"></p><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p><img src="/images/%E4%B8%8B%E5%8C%97%E6%B3%BD4.png" alt="4"></p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p><img src="/images/%E4%B8%8B%E5%8C%97%E6%B3%BD5.png" alt="5"></p><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p><img src="/images/%E4%B8%8B%E5%8C%97%E6%B3%BD6.png" alt="6"></p><h2 id="新宿"><a href="#新宿" class="headerlink" title="新宿"></a>新宿</h2><h3 id="B-1"><a href="#B-1" class="headerlink" title="B"></a>B</h3><p><img src="/images/%E6%96%B0%E5%AE%BF%E5%BE%A1%E8%8B%91.jpg" alt="1"></p><h3 id="D-1"><a href="#D-1" class="headerlink" title="D"></a>D</h3><p><img src="/images/%E6%96%B0%E5%AE%BFD.png" alt="d"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><p><img src="/images/1.png" alt="1"></p><p>private是私有的，外面看不见，要访问需使用外部接口</p><h2 id="类定义的语法形式"><a href="#类定义的语法形式" class="headerlink" title="类定义的语法形式"></a>类定义的语法形式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">       公有成员（一般把外部接口写这里）</span><br><span class="line">       类与外部的接口</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">       私有成员</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">       保护型成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象定义的语法"><a href="#对象定义的语法" class="headerlink" title="对象定义的语法"></a>对象定义的语法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clock myclock</span><br></pre></td></tr></table></figure><h2 id="成员访问"><a href="#成员访问" class="headerlink" title="成员访问"></a>成员访问</h2><p>类内成员可互相访问</p><p>类外成员通过对象访问</p><h2 id="成员函数的使用语法"><a href="#成员函数的使用语法" class="headerlink" title="成员函数的使用语法"></a>成员函数的使用语法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">clock::settime</span><span class="params">(<span class="type">int</span> newhour)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">hour=newhour;</span><br><span class="line">&#125;</span><br><span class="line">::代表该函数时clock类内的函数</span><br></pre></td></tr></table></figure><h2 id="内联成员函数"><a href="#内联成员函数" class="headerlink" title="内联成员函数"></a>内联成员函数</h2><p>为了提高运行效率，通常把简单函数写城内联</p><p><strong>语法</strong>：</p><p>1.直接在类内写函数体</p><p>2.使用inline关键字</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>初始化对象</p><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><p>函数名和类名相同</p><p>不能定义返回值类型，也不能有return语句</p><h3 id="调用时机"><a href="#调用时机" class="headerlink" title="调用时机"></a>调用时机</h3><p>对象被创建时自动调用</p><h3 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h3><p>1.参数表为空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clock</span>()</span><br></pre></td></tr></table></figure><p>2.参数表都是默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clock</span>(sethour=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="隐含生成构造函数"><a href="#隐含生成构造函数" class="headerlink" title="隐含生成构造函数"></a>隐含生成构造函数</h3><p>当未写构造函数时，系统自动生成</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">clock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="built_in">clock</span>(sethour);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> hour;</span><br><span class="line">&#125;</span><br><span class="line">clock:<span class="built_in">clock</span>(sethour):<span class="built_in">hour</span>(<span class="type">int</span> sethour)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">clock <span class="title">time1</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若我要初始化如下形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">clock <span class="title">time1</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>我需要在类中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clock</span>();</span><br></pre></td></tr></table></figure><h3 id="default"><a href="#default" class="headerlink" title="&#x3D;default"></a>&#x3D;default</h3><p>代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clock</span>();</span><br></pre></td></tr></table></figure><p>无论初始化用不用得着，都要生成一个默认构造函数。</p><p>而使用default</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clock</span>() =<span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><p>可以在只有用他的时候生成，提升效率</p><h3 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h3><p>当使用多个构造函数时，为避免代码重复，可以使用委托构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clock::clock:<span class="built_in">hour</span>(setH)&#123;&#125;</span><br><span class="line">clock::clock:<span class="built_in">hour</span>(<span class="number">0</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>这是普通情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clock::clock:<span class="built_in">hour</span>(setH)&#123;&#125;</span><br><span class="line">clock::clock:<span class="built_in">clock</span>(<span class="number">0</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>这是使用委托构造函数，委托clock(a)</p><h3 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h3><p>如果不写，系统将自动生成一个默认的复制构造函数。</p><p>将一个已存在的对象去初始化一个新的对象</p><p>类名（const 类名 &amp;对象名）；</p><p>类名：：类(const 类名 &amp;对象名) {函数体}</p><p>如果不想去使用复制构造函数，可以用以下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">point</span>(<span class="type">const</span> point &amp;p) =<span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/2.png" alt="2"></p><h2 id="右值与左值"><a href="#右值与左值" class="headerlink" title="右值与左值"></a>右值与左值</h2><p>左值是地址，右值是常数或式子。</p><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>完成对象被删除前的一些清理工作。</p><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">point</span>();</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">point::~<span class="built_in">point</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h2><p><strong>构造函数设计</strong></p><p>不仅对本类初始化，也对对象成员初始化。</p><p>初始化次序是定义次序。</p><h3 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h3><p>如果要在类被定义前使用该类，可使用前向引用声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>;</span><br></pre></td></tr></table></figure><p>再提供完整类之前，不能对该类对象进行声明，不能在内联成员函数中使用该对象。</p><h1 id="数据的共享与保护"><a href="#数据的共享与保护" class="headerlink" title="数据的共享与保护"></a>数据的共享与保护</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>作用域是一个标识符在程序正文中有效的区域。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="函数原型作用域"><a href="#函数原型作用域" class="headerlink" title="函数原型作用域"></a>函数原型作用域</h4><p>函数原型的参数，其作用域是“（）”</p><p>如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">(<span class="type">double</span> radius)</span></span>;</span><br></pre></td></tr></table></figure><p>(double radius)是参数radius的作用域</p><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><p>函数的形参，在块中声明的标识符；</p><p>其作用域自声明处起，限于块中。</p><h4 id="类作用域"><a href="#类作用域" class="headerlink" title="类作用域"></a>类作用域</h4><p>类的成员具有类作用域，其范围包括类体和非内联成员函数的函数体。</p><h4 id="命名空间作用域"><a href="#命名空间作用域" class="headerlink" title="命名空间作用域"></a>命名空间作用域</h4><p>命名空间可以解决类名，函数名等的命名冲突。</p><p>如何声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> 命名空间名&#123;</span><br><span class="line">各种声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> somens&#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">someclass</span>&#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用类名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">somens::someclass obj1;</span><br></pre></td></tr></table></figure><p>using语句的两种形式</p><p>1.using 命名空间名::标示符名；</p><p>可以让该标识符不需要加前缀。</p><p>2.using namespace 命名空间名；</p><p>该形式会让命名空间全部打开，不需要在写前缀 …::</p><p>特殊的命名空间：</p><p>1.全局命名空间：默认的命名空间</p><p>2.匿名命名空间：对每个源文件是唯一的</p><p>形式：</p><p>namespace后面不要跟名字</p><h4 id="限定作用域的枚举类"><a href="#限定作用域的枚举类" class="headerlink" title="限定作用域的枚举类"></a>限定作用域的枚举类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">color</span>&#123;red,yellow,green&#125;;<span class="comment">//不限定作用域</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">color2</span>&#123;red,yellow,green&#125;;<span class="comment">//错误，重复定义</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">color2</span>&#123;red,yellow,green&#125;;<span class="comment">//正确，限定作用域</span></span><br><span class="line">color c = red;<span class="comment">//全局作用域</span></span><br><span class="line">color c2 = color2::red;<span class="comment">//限定作用域</span></span><br></pre></td></tr></table></figure><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>可见性表示从内层作用域向外层作用域看能看见什么</p><p>一个全局变量和局部变量重名，如果要在局部作用域中使用文件作用域的该全局变量，要使用::i。</p><p>静态变量不用初始化，他的初始值是0。若要初始化只能初始化一次。</p><h2 id="生存期"><a href="#生存期" class="headerlink" title="生存期"></a>生存期</h2><p>对象从产生到结束的期间称为生存期</p><h3 id="静态生存期"><a href="#静态生存期" class="headerlink" title="静态生存期"></a>静态生存期</h3><p>与程序运行期相同，在函数内部声明要加static</p><h3 id="动态生存期"><a href="#动态生存期" class="headerlink" title="动态生存期"></a>动态生存期</h3><p>开始于声明处，结束于作用域结束时。</p><h2 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h2><h3 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h3><p>在类内声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> count;</span><br></pre></td></tr></table></figure><p>定义和初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">point</span><span class="params">(类名)</span>::count</span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>任何对象都能访问静态数据成员，并且是共享且唯一的。</p><h3 id="静态函数成员"><a href="#静态函数成员" class="headerlink" title="静态函数成员"></a>静态函数成员</h3><p>语法：</p><p>类内声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> 返回值类型 函数名称()&#123;&#125;;</span><br></pre></td></tr></table></figure><p>类外使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::函数名();</span><br></pre></td></tr></table></figure><p>静态函数成员可直接访问静态数据成员，但不可以直接访问非静态数据成员。</p><h2 id="类的友元"><a href="#类的友元" class="headerlink" title="类的友元"></a>类的友元</h2><p>将一个模块视为另一个模块的朋友，一个模块可以访问另一个模块中被隐藏的信息</p><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><p>在类声明中用<strong>friend</strong>做关键字修饰的<strong>非成员函数</strong>，可以访问private和protected成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">float</span> <span class="title">list</span><span class="params">(point &amp;a)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">list</span> <span class="params">(point &amp;a)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>因为友元函数时非成员函数，所以它在声明时可以放在类的任何一个位置。</p><p>要把对象作为函数形参，尽量使用引用，因为占用内存少。</p><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><p><img src="/images/3.png" alt="3"></p><h2 id="共享数据的保护"><a href="#共享数据的保护" class="headerlink" title="共享数据的保护"></a>共享数据的保护</h2><h3 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h3><p>常对象必须进行初始化而且不能被更新。</p><p>常成员语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> 类名 对象名 = 数据；</span><br></pre></td></tr></table></figure><h3 id="用const修饰的类成员"><a href="#用const修饰的类成员" class="headerlink" title="用const修饰的类成员"></a>用const修饰的类成员</h3><h4 id="常成员函数"><a href="#常成员函数" class="headerlink" title="常成员函数"></a>常成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名() <span class="type">const</span>；</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名() <span class="type">const</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="常数据成员"><a href="#常数据成员" class="headerlink" title="常数据成员"></a>常数据成员</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a；</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> b;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> 类名::b = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h3><p>之前说过函数形参是对象时，尽量用引用，但是引用作为形参更改时，实参也会更改，为防止这件事，可以用常饮用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">a</span><span class="params">(<span class="type">const</span> point &amp;a)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="多文件结构和编译预处理命令"><a href="#多文件结构和编译预处理命令" class="headerlink" title="多文件结构和编译预处理命令"></a>多文件结构和编译预处理命令</h2><h3 id="c-程序的一般组织结构"><a href="#c-程序的一般组织结构" class="headerlink" title="c++程序的一般组织结构"></a>c++程序的一般组织结构</h3><p>包括：<br>1.类定义文件</p><p>2.类的实现文件</p><p>3.类的使用文件</p><h3 id="外部变量和外部函数"><a href="#外部变量和外部函数" class="headerlink" title="外部变量和外部函数"></a>外部变量和外部函数</h3><h4 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h4><p>声明：在函数外部声明的变量</p><p>在其他文件中使用要在声明前加<strong>extern</strong></p><h4 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数"></a>外部函数</h4><h4 id="将变量和函数限制在编译单元内"><a href="#将变量和函数限制在编译单元内" class="headerlink" title="将变量和函数限制在编译单元内"></a>将变量和函数限制在编译单元内</h4><p>一个文件下的函数和变量尽量不要让另一个文件访问，可采用匿名命名空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">     n++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应当将不希望被其他编译单元看见的变量和函数放在匿名命名空间内。</p><h3 id="编译预处理"><a href="#编译预处理" class="headerlink" title="编译预处理"></a>编译预处理</h3><h4 id="include"><a href="#include" class="headerlink" title="#include"></a>#include</h4><h4 id="define和-undef"><a href="#define和-undef" class="headerlink" title="#define和#undef"></a>#define和#undef</h4><h4 id="条件编译指令"><a href="#条件编译指令" class="headerlink" title="条件编译指令"></a>条件编译指令</h4><h4 id="defined标识符"><a href="#defined标识符" class="headerlink" title="defined标识符"></a>defined标识符</h4><h1 id="数组指针字符串"><a href="#数组指针字符串" class="headerlink" title="数组指针字符串"></a>数组指针字符串</h1><h2 id="对象指针"><a href="#对象指针" class="headerlink" title="对象指针"></a>对象指针</h2><h3 id="指向类的非静态成员的指针"><a href="#指向类的非静态成员的指针" class="headerlink" title="指向类的非静态成员的指针"></a>指向类的非静态成员的指针</h3><p>先声明，在赋值，最后引用</p><p>声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类型说明符 类名::*指针名</span><br><span class="line">类型说明符 (类名::*指针名)(参数表)；</span><br><span class="line">类型说明符 (类名::*指针名)(参数表) <span class="type">const</span>；</span><br></pre></td></tr></table></figure><p>赋值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指针名=&amp;类名::数据成员名</span><br><span class="line">指针名=&amp;类名::函数成员名</span><br></pre></td></tr></table></figure><p>引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对象名.*类成员指针名</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">对象指针名-&gt;*类成员指针名</span><br><span class="line"></span><br><span class="line">(对象名.*类成员指针名)(参数表)</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">(对象指针名-&gt;类成员指针名)(参数表)</span><br></pre></td></tr></table></figure><h3 id="指向类的静态成员的指针"><a href="#指向类的静态成员的指针" class="headerlink" title="指向类的静态成员的指针"></a>指向类的静态成员的指针</h3><p>可直接访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型说明符 *指针名 = &amp;类名::数据成员；</span><br><span class="line">类型说明符 (*指针名)(参数表) = &amp;类名::函数成员；</span><br></pre></td></tr></table></figure><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类型名<span class="built_in">T</span>(初始化参数)；</span><br><span class="line"><span class="keyword">new</span> 类型名T[表达式][常量表达式]...()</span><br></pre></td></tr></table></figure><p>基本类型初始化：初始化参数这里，如果不写括号，初始值就是不确定的。如果只写了个括号。初始值为0.</p><p>对象初始化：不写括号和只写括号，使用默认构造函数初始化，写数值，用构造函数初始化，并且数值为实参。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *fp[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>这是指向一维数组的指针，一般用于动态内存分配。</p><p>释放内存表达符：delete</p><p>delete 指针名；</p><p>delete []指针名；释放指针p指向的数组。</p><p>使用delete时，会调用析构函数，来处理一些善后工作。</p><h2 id="深层复制和浅层复制"><a href="#深层复制和浅层复制" class="headerlink" title="深层复制和浅层复制"></a>深层复制和浅层复制</h2><h3 id="浅层复制"><a href="#浅层复制" class="headerlink" title="浅层复制"></a>浅层复制</h3><p>是默认复制函数，复制值，地址不变。</p><h3 id="深层复制"><a href="#深层复制" class="headerlink" title="深层复制"></a>深层复制</h3><p>开辟新地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DeepExample</span>(<span class="type">const</span> DeepExample&amp; other) &#123;</span><br><span class="line">       data = <span class="keyword">new</span> <span class="built_in">int</span>(*other.data);  <span class="comment">// 分配新内存并复制值</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tour of japan</title>
      <link href="/posts/e4c3c5c3.html"/>
      <url>/posts/e4c3c5c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="日本之旅"><a href="#日本之旅" class="headerlink" title="日本之旅"></a>日本之旅</h1><p>日期：7.22-7.30</p><h2 id="东京"><a href="#东京" class="headerlink" title="东京"></a>东京</h2><p><strong>日期</strong>：7.22-7.26</p><p><strong>上海飞成田</strong>：21点01到达</p><p><strong>羽田机场飞神户机场</strong>：7.26 7点20到8点35</p><h3 id="7-22"><a href="#7-22" class="headerlink" title="7.22"></a>7.22</h3><p><strong>办理入住</strong></p><p>从成田机场到酒店大约7公里，坐电车30分钟。</p><h3 id="7-23"><a href="#7-23" class="headerlink" title="7.23"></a>7.23</h3><h4 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h4><h5 id="入住"><a href="#入住" class="headerlink" title="入住"></a>入住</h5><p>距离出发地大概60公里，坐电车1小时40分钟。</p><p>价格约1400日元。</p><p>预计8点到9点出发</p><h5 id="秋叶原"><a href="#秋叶原" class="headerlink" title="秋叶原"></a>秋叶原</h5><p><strong>秋叶原站</strong>：圣地巡礼：命运石之门</p><p><strong>秋叶原UDX</strong>：一所商业大楼。圣地巡礼：lovelive</p><p><strong>秋叶原广播站</strong>：圣地巡礼：命运石之门</p><p><strong>唐吉可德</strong>：圣地巡礼：中二病也要谈恋爱</p><p><strong>RADIO会馆</strong>：谷子手办非常齐全</p><p><strong>黄绿红楼</strong>：sese</p><p><strong>爱电王edion</strong>：电子产品</p><p><strong>animate</strong>：吃谷必经地</p><p><strong>骏和物</strong>：中古店</p><p><strong>GIGO</strong>：抓娃娃</p><h4 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h4><h5 id="浅草寺"><a href="#浅草寺" class="headerlink" title="浅草寺"></a>浅草寺</h5><h5 id="秋叶原-1"><a href="#秋叶原-1" class="headerlink" title="秋叶原"></a>秋叶原</h5><h5 id="东京塔"><a href="#东京塔" class="headerlink" title="东京塔"></a>东京塔</h5><h5 id="武道馆"><a href="#武道馆" class="headerlink" title="武道馆"></a>武道馆</h5><p>晚上可以选择逛银座</p><h3 id="7-24"><a href="#7-24" class="headerlink" title="7.24"></a>7.24</h3><h4 id="上午-1"><a href="#上午-1" class="headerlink" title="上午"></a>上午</h4><h5 id="下北泽巡礼"><a href="#下北泽巡礼" class="headerlink" title="下北泽巡礼"></a>下北泽巡礼</h5><h5 id="临近中午去涩谷吃饭"><a href="#临近中午去涩谷吃饭" class="headerlink" title="临近中午去涩谷吃饭"></a>临近中午去涩谷吃饭</h5><p>分享的路线<br>从下北泽 日本〒155-0031 Tokyo, Setagaya City, Kitazawa, 2 Chome−24−2到Coat First Stage（经由下北沢一番街）。</p><p>11 分钟 （2.3公里）<br>如需查询当前路况下的最佳路线，请访问 <a href="https://maps.app.goo.gl/Lo2aPLKPhHKK8VyZ6?g_st=awc">https://maps.app.goo.gl/Lo2aPLKPhHKK8VyZ6?g_st=awc</a></p><p>巡礼顺序见下北泽</p><h4 id="下午-1"><a href="#下午-1" class="headerlink" title="下午"></a>下午</h4><h5 id="涩谷忠犬八公和十字路口"><a href="#涩谷忠犬八公和十字路口" class="headerlink" title="涩谷忠犬八公和十字路口"></a>涩谷忠犬八公和十字路口</h5><h5 id="新宿新海诚巡礼"><a href="#新宿新海诚巡礼" class="headerlink" title="新宿新海诚巡礼"></a>新宿新海诚巡礼</h5><p>新宿御苑</p><p>须贺神社</p><p>分享的路线<br>从下北泽 日本〒155-0031 Tokyo, Setagaya City, Kitazawa, 2 Chome−24−2到唐吉訶德 新宿歌舞伎町店 日本〒160-0021 Tokyo, Shinjuku City, Kabukicho, 1 Chome−16−5（经由都道413号）。</p><p>46 分钟 （15公里）<br>如需查询当前路况下的最佳路线，请访问 <a href="https://maps.app.goo.gl/MfYG13prmwSTfZf68?g_st=awc">https://maps.app.goo.gl/MfYG13prmwSTfZf68?g_st=awc</a></p><p>详细见下北泽</p><h4 id="傍晚"><a href="#傍晚" class="headerlink" title="傍晚"></a>傍晚</h4><p>歌舞伎町</p><h3 id="7-25"><a href="#7-25" class="headerlink" title="7.25"></a>7.25</h3><h4 id="川崎"><a href="#川崎" class="headerlink" title="川崎"></a>川崎</h4><h4 id="镰仓"><a href="#镰仓" class="headerlink" title="镰仓"></a>镰仓</h4><h2 id="神户"><a href="#神户" class="headerlink" title="神户"></a>神户</h2><p><strong>日期</strong>：7.26</p><h3 id="生田神社"><a href="#生田神社" class="headerlink" title="生田神社"></a>生田神社</h3><p>Ciallo～(∠・ω&lt; )⌒★</p><ol><li><strong>距离</strong>：神户机场距离生田神社9.5公里</li><li><strong>交通工具</strong>：电车</li><li><strong>游玩时长</strong>：一上午</li></ol><h3 id="远坂家"><a href="#远坂家" class="headerlink" title="远坂家"></a>远坂家</h3><h3 id="神户大桥"><a href="#神户大桥" class="headerlink" title="神户大桥"></a>神户大桥</h3><h2 id="大版"><a href="#大版" class="headerlink" title="大版"></a>大版</h2><p><strong>日期</strong>：7.26</p><p><strong>任务</strong>：</p><h3 id="办理入住"><a href="#办理入住" class="headerlink" title="办理入住"></a>办理入住</h3><ol><li><p><strong>距离</strong>：生田神社距离民宿35公里，坐电车约1小时</p></li><li><p><strong>交通工具</strong>：电车</p></li></ol><h3 id="梅田蓝天大厦"><a href="#梅田蓝天大厦" class="headerlink" title="梅田蓝天大厦"></a>梅田蓝天大厦</h3><p>1993年3月完工,是日本国内首座连通型的超高层大厦，两栋超高层大厦被2层高的结构物（空中庭园）刚性地连接了起来。是著名大师<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%B9%BF%E5%8F%B8/1432392?fromModule=lemma_inlink">原广司</a>作品。</p><p>开放时间：9:30～22:30，票价：1500，<strong>大阪周游券</strong>持有者可免费入场。小兰和柯南去过。</p><h3 id="大阪城公园"><a href="#大阪城公园" class="headerlink" title="大阪城公园"></a>大阪城公园</h3><p>大阪城公园入园免费，开放时间为9:00—17:30。</p><p>初代奥特曼里，格莫拉入侵过。</p><p>服部平次同款机位。</p><h3 id="大阪府警擦本部"><a href="#大阪府警擦本部" class="headerlink" title="大阪府警擦本部"></a>大阪府警擦本部</h3><p>柯南同款</p><h3 id="道顿堀"><a href="#道顿堀" class="headerlink" title="道顿堀"></a>道顿堀</h3><p>经典男子双臂展开图片，大版标志。</p><h3 id="心斋桥"><a href="#心斋桥" class="headerlink" title="心斋桥"></a>心斋桥</h3><p>繁华商业街，柯南同款。</p><h3 id="通天阁"><a href="#通天阁" class="headerlink" title="通天阁"></a>通天阁</h3><p>柯南同款机位。</p><h3 id="四天王寺"><a href="#四天王寺" class="headerlink" title="四天王寺"></a>四天王寺</h3><p><img src="/images/ditu.jpg" alt="ditu"></p><h2 id="京都"><a href="#京都" class="headerlink" title="京都"></a>京都</h2><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>从酒店出发，第一站为花间小路，之后去二年板，途径八板神社，到清水寺，之后坐车到伏见稻荷神社，晚上再去鸭川。</p><p>分享的路线<br>从Kagiyacho到京都动画 日本〒611-0002 Kyoto, Uji, Kohata, Osedo−32（经由五条通&#x2F;国道1号和川端通）。</p><p>分享的路线<br>从Kagiyacho, 下京区京都市京都府 600-8126日本到贵船神社 日本〒601-1112 Kyoto, Sakyo Ward, Kuramakibunecho, 180（经由五条通）。</p><p>1 小时 39 分钟 （51公里）<br>如需查询当前路况下的最佳路线，请访问 <a href="https://maps.app.goo.gl/WUYCAJDD9VnZeTJQ7?g_st=awc">https://maps.app.goo.gl/WUYCAJDD9VnZeTJQ7?g_st=awc</a></p><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>岚山，竹林小径，琉璃光院，三千院，贵船神社</p><p>分享的路线<br>从Kagiyacho, 下京区京都市京都府 600-8126日本到贵船神社 日本〒601-1112 Kyoto, Sakyo Ward, Kuramakibunecho, 180（经由五条通）。</p><p>1 小时 39 分钟 （51公里）<br>如需查询当前路况下的最佳路线，请访问 <a href="https://maps.app.goo.gl/WUYCAJDD9VnZeTJQ7?g_st=awc">https://maps.app.goo.gl/WUYCAJDD9VnZeTJQ7?g_st=awc</a></p><p>详细见京都</p><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>见京都</p>]]></content>
      
      
      <categories>
          
          <category> tour </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tour </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}.site-title{    color: #1d1c1c !important;}]]></content>
      
    </entry>
    
    
  
</search>
